# Structure of the project
# Objects
objects:
  coreAttrs:
    # layout for the web•presentation
    $layout: 'string'
    # reference to the data in original language
    $refer: 'nwDataUri'
    # redirect to another resource
    $redirect: 'string'
    # object's hidden option, if true object is not rendered, default is undefined (false)
    $hidden: 'boolean'
    # theme name for web•presentation
    $theme: 'string'
    # extend the data file
    $extend: 'nwDataUri'
    # define the goods connected to the page
    $catalog: 'string'
  accessAttrs:
    $public: 'object'
  # the path to data file inside ./data/, for example: 
  # file: ./data/uk/about/me.yaml, nwDataUri: /uk/about/me
  # file: ./data/uk/about/index.yaml, nwDataUri: /uk/about/ | /uk/about/index
  nwDataUri: 'string > URL.pathname'
  nwImageType: 'string | { src: "string", name: "string" } | [ "nwImageType" ]'
  # Nano type includes the object YAML representation of the HTML document DOM,
  # where is key a tag name or attribute name if starts with $ (dollar sign)
  # { $target: '_blank', $href: 'https://yaro.page/nanoweb', a: 'Nanoweb website' }
  nwNanoType: 'string | [ nwNanoType ] | { "any": "any" }
  nwCategoryType: 'string | { title: "string", options: { "any": "any" } }'
  nwFileType: 'string | { src: "string", name: "string", files: [ "nwFileType" ], "any": "any" }'
  post:
    # standard object is the page that has web•representation
    **coreAttrs
    **accessAttrs
    # this title is used for the meta tag usually, not the HTML view.
    title: 'string'
    # this desc is used for the meta tag usually, not the HTML view.
    desc: 'string'
    image: 'string'
    # automatically generated if gallery.ogThumb is defined
    ogImage: 'string'
    page:
      date: 'string'
      category: 'nwCategoryType'
      # the options of gallery.thumb are applicable for the image
      image: 'nwImageType'
      title: 'string'
      # this page.desc is used as presentation of description in HTML view
      desc: 'nwNanoType'
      content: 'nwNanoType'
    files: '[ "nwFileType" ]'
# Thumbnails
thumbnails:
  web/data/uk/news/2022/02/24/20220224-Prodigy-Invanders-Must-Die.jpg
  # automatically converts post and gallery images into smaller and optimized image if gallery.thumb provided
  web/public/thumbs/uk/news/2022/02/24/20220224-Prodigy-Invanders-Must-Die@9-6-h300px-q81.webp
# Files
files:
  legacy/
    collect.py
    collect.rules.yaml
  web/
    # source data storage in diffenent file formats, main is .yaml, keep data stored as minimum as possible
    data/
      # the top level directory of the data is the language code: en, en-US, en-GB, uk, uk-UA.
      # also _ (underscore) is as a global data objects, such as social links, navigation (in basic language), analytics and pixels, etc.
      # also possible to have legacy/ with the specific data coming from the legacy in a manual procedure
      # also editor/ is for nan•web editor data
      editor/
      en/
      uk/
       news/
         # stucture news or other publications by year / month / day
         2022/
           02/
             24/
               # store object data files under the same name with different extensions
               20220224-Prodigy-Invanders-Must-Die.yaml
               20220224-Prodigy-Invanders-Must-Die.txt
               20220224-Prodigy-Invanders-Must-Die.jpg
               20220224-Prodigy-Invanders-Must-Die.icon.jpg
               # or store object in the separate directory
               # remember to link files properly
               # only .yaml files are loaded automatically by the web processor
               20220224-Prodigy-invanders-must-die/
                 index.yaml
                 vers.txt
                 cover.jpg
                 icon.jpg
          # if you have few posts in this category (news) you can deduct the depth to store 
          2023/
            20230101-Unhappy-new-year.yaml
        # configuration for the whole uk/ Ukrainian directory
        _.yaml
        # Index publication data.
        index.yaml
    src/
    public/
      css/
      js/
      img/
    views/
    # store the themes with views
    themes/
      guru/
        views/
      media/
        views/
      yaro/
        views/
    .env
    # copy collected legacy files
    copy-legacy.js
    # publish current version to the server that defined in .env
    publish.js
    # render current version, including search indecies and image thumbnails
    render.js
    # start the server to browse the current version of the web•presentation of data
    server.js
