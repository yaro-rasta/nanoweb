# Process of maintaining and presenting data
- handle the request from the client
- read: URI
- read data by URI /en/goods/logic/rules.html
- expected result rendered in HTML
- html:
    uri: /en/goods/logic/rules.html
    head:
      title: Rules
      icon: /en/goods/logic/rules.jpg
    body:
      img: /en/goods/logic/rules@.webp[jpg]
      thumb: /en/goods/logic/rules@1-1-h420px-north.jpg
      figure:
        figcaption: private data
        img: /en/goods/logic/rules.jpg
- extract nwDataUri = /en/goods/logic/rules
- title: load settings for all the directories to the root
  process:  
    - detect directories
    - dirs:
      - /
      - /en
      - /en/goods
      - /en/goods/logic
      - /en/goods/logic/rules
    - detect directory settings to load before the file.
    - files:
      - /_.yaml
      - /en/_.yaml
      - /en/goods/_.yaml
      - /en/goods/logic/_.yaml
      - /en/goods/logic/rules/_.yaml
    - read all the existing files into the object
    - settings:
      - fn: 
        - loadData(files)
        - every file stores its data separately in the cache cache[file] = data
        - handle $extend, $extendFull, $refer (to add to alternates) properties
        - handle import(*nwDataUri) values
    - read the URI file data
    - file: /en/goods/logic/rules.yaml
    - store in cache cache[file] = data
- title: render data
  process:
    - read all renders in ./src/render/item/**
    - render with every item({...settings, ...data})
    - render all renders in ./src/render/html/**
    - render with every html(html)
    - data: settings + loadData(file)
    - data is loaded, render the data according to the data render options ($hidden, $theme, $layout, $redirect)
    - render the data based on the options $theme, $layout, $rendering, $hidden, $redirect, $engine, $private
    - fn: render(data)

- renders:
  - config.yaml:
    # define the order and enabled renders, comment to disable
    - item/:  
      - redirects # redirects are used for new websites on nanâ€¢web copied from the legacy
      - search
      - html
    - html/:
      - emails
      - scripts
      - styles
      - sitemapXML
      # - minify
    - all/:
      - htaccess
      - robotsTXT
      
  - item/: # ./src/render/item/redirects.js
    - fn: |
        redirects(item) => { key: 'item', output: 'item' }
    - fn: |
        search(item) => { key: 'search', output: 'string', join: "\n\n", file: null, save: () => 'file' }
    - fn: |
        html(item) => { key: 'html', output: 'string', join: '', file: `${uri}.html`, save: () => 'file' } }
    - fn: sitemapXML(item)
  - html/:
    # ./src/render/html/emails.js
    - fn: emails(html)
    # ./src/render/html/scripts.js
    - fn: scripts(html)
    # ./src/render/html/styles.js
    - fn: styles(html)
    # ./src/render/html/minify.js
    - fn: minify(html)
  - search/:
    - fn: 
  - all:
    - fn: |
        htaccess(items) => { output: 'string', file: 'file' }
    - fn: |
        robotsTXT(items) => { output: 'string', file: 'file' }
