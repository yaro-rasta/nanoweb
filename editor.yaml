- title: This document describes the minimalistic nan•web editor for those who only starts the way of learning coding own life.

- goal: Manage the data in a easy way but with no less functionality as it is possbile now with vscode.
- features:
  - see the structure of the project:
    - data/•• # (data and knowledge storage). Must be saved in the repository.
    - public/•• # uploaded data assets such as images, videos, documents. It should be stored in the repository.
  - manage data: # both .yaml and assets 
    - add
    - edit (data files only)
    - soft delete
    - hard delete (by admin?)
    - commit to repository (future feature?)
    - pull the repository (future feature?)
  - upload documents
  - see the project status:  
    - size
    - count of files
    - sitemap
    - robots.txt
    - search indecies
- solution:  
    server: ./server.js
    auth: Basic | JWT with the .yaml database?
    render:
      - editor panel:
        - settings: 
          - user management:
            - user info:
              - login: [\w]+[\w\d\@\_\.\-]{3,33}
              - password: [\S]{8,} # store only strong hash, should it be stored in the repository?
              - email: standard email validation.
              - phone: standard phone validation, short phones suchs (020) 1598 possible
              # the access level: 0 - admin, 1 - user
              - access: 0
              - $store: access/users/${name}/user.yaml
            - session info:
              - id: [\w\d\]{63}
              - login: user login
              - till: unix timestamp
              - $store: 
                - access/sessions/${id[0:3]}/${id[3:6]}/${id}.txt
                - access/sessions/all.bin # store [session.till, session.id]
            - group:
              - name: [\w]+[\w\d\@\_\.\-]{3,33}
              - users: array of user objects
              - $store: access/groups/{name}.yaml
            - user access:
              # [ nwDataUri ] | '*' | 0
              read:  
                *
              # [ nwDataUri ] | '*' | 0
              write:
                uk/goods/
                uk/goods.yaml
              # [ nwDataUri ] | '*' | 0
              delete:
                uk/goods/
              # [ nwDataUri ] | '*' | 0
              # trust is required to write or delete data without approval by admin
              trust: 0
            - group access:
              # same as user access
          - data manager:
            - data tree: simple files/dirs tree structure # according to the user access
            - add: create data files and directories # according to the user access
            - edit:
              - dir settings: _.yaml per directory
              - file settings: nwDataUri .yaml per file
              - dir content: _.yaml per directory
              - file content: nwDataUri .yaml per file
              - dependencies: 
                - when editing the content of $extend, $refer, files[$ref] take care of connected files
                - provide easy way to upload media files
                - when uploading files:
                  - options:
                      location:
                      - file: |
                          upload file with the same name of the data file for a single file.
                          Good for media related to the data. 
                          Will be stored in the repository by default with the same name but different ext.
                      - dir: |
                          upload files with the same name of the data file as a directory.
                          Goood for medias related to the data that need to be stored in the repository.
                      - public: |
                          upload files with the same path of the data file but in public/{nwDataUri}/.
                      - day: |
                          upload files with public/{nwDataUri}/{year}/{month}/{day}/.
                      - month: |
                          upload files with public/{nwDataUri}/{year}/{month}/.
                      - year: |
                          upload files with public/{nwDataUri}/{year}/.
                  - meta:
                      src: location to the file # [ file:ext, dir:name.ext, public:name.ext, day:name.ext, month:name.ext, year:name.ext ]
                      name: [\w\d]{1}.*
                  - tranforms:
                      filename: [a-Z\d]{1}[a-Z\d\.\-\_]{,99}\.[a-zA-Z\d]{2,}
                      thumb: filename@pattern.origExt.ext
                - provide easy way to select the existing media files from the library with the search and file manager
            - delete:
              - dirs
              - files
            
      - each page (nwDataUri) has:
        - an edit button that allows chaning all the data in that file + add new attributes and content
        - see the parent options to the root
    components:
      nwComponent:
        type: The data type. # nwDataUri, nwFileUri, etc.
        view: r | w # ∙r∙ead or ∙w∙rite 
        data: object # attached data to the component
        all: global data scope
      nwNanoComponent:
        r:
          - 
          - nano2html() => tinyMCE editor # renderEJSContent
        w:
          - html2nano() => .yaml file # python
      nwTextComponent:

      nwFileUriComponent:
      nwFileComponent:
        read:
          file:  
            $type: file
            $name: file
            $accept: image/*,video/*,application/pdf,.doc,.docx,.zip
            $placeholder: Choose a file
            $label: File
            $var: src
          name:
            $type: text
            $name: name
            $placeholder: Name the file
            $label: Name
            $var: name
        view:
          div:
            - $href: ${data['src']}
              a: 
                - $class: icon-download
                  span: ''
                - ${data['name']}
        write:
          
      nwFilesComponent:
        read:
          - nwFileComponent
      nwDataUriComponent:
  
